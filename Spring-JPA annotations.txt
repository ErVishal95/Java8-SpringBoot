Java 7,
Java 8,
Spring MVC,
JPA - Hibernate,
PL/SQL - proceddures


java 8 :-
Stream API,
Functional Interface,
Lambda expression,
ForEach() Method
Predicates and filters
Stream API aggrigate functions - list.stream.map(Class<T> :: getter).max(Comparator.naturalOrder());
																	.min(Comparator.naturalOrder());
																	.findFirst();
																	.sorted();
																	.sorted().findFirst();
																	.sorted(Comparator.reverseOrder());
																	.sorted(Comparator.reverseOrder()).findFirst();
																	.sorted().distince();
																	.sorted.limit(5/ any number);
																	.count();
									.stream().map(Employee:: getSalary).reduce(Float:: max);
									.stream().map(Employee:: getSalary).mapToDouble(i-> i).sum();
									.stream().map(Employee:: getSalary)
															.mapToDouble( i-> i)
															.average().ifPresent(avg -> System.out.println("Average of salary is: "+avg));
																	
Predicate examples:-

- public static Predicate<Employee> checkAgeLesserThen(Optional<Integer> age){
		return p-> p.getAge() < age.get()-20;
	}

- public static Predicate<Employee> isAgeGreaterThenAndDepartmentIs(int age, String department){
		return p-> p.getAge() > age && p.getDepartment().equalsIgnoreCase(department);
	}
	
Filters:-

- public static List<Employee> filterEmployee(List<Employee> employees, Predicate<Employee> predicate){
		return employees.stream().filter(predicate).collect(Collectors.<Employee>toList());
	}

implementation:-
-	Optional<Integer> maxAge = emplist.stream().map(Employee:: getAge).max(Comparator.naturalOrder());	//Max Age
		System.out.println(maxAge);
		
-		System.out.println(filterEmployee(emplist, checkAgeLesserThen(maxAge)));	
		
-	System.out.println(filterEmployee(emplist, isAgeGreaterThenAndDepartmentIs(25, "IT")));


Spring MVC & SpringBoot:-

Core Annotations-

@configuration - used to mark a class as source of Bean Definition, beans are the component that we need to wire.
@Bean - this annotation is a bean producer used along with @configuration annotation.
@componentScan - scan for the spring packages configured with it for @configuration classes.
@component - used for making a class as Spring Bean at auto - scan time.
@service - more specialised annotation of @component annotation.
@Autowire - to wire application component together, @Autowire annotation is used over - field, constructor, and mthods
@Lazy - Used for Lazy initialization or ondemand initialization. By default bean initialization is eager.
@Qualifier - can be used along with @Autowire annotation marked field if same field can be wired with multiple beans and one specific bean is required out of all available beans
@value - can be used to set the default value of a field.
@Required - if dependency injection need to be varified while wiring the bean using @Autowire annotation in more robust way, @Required annotation is best to use.
@Repository - used for dao operations and establishing the connection with database

SpringBoot and Web Annotations-

@SpringBootApplication - combination of (@configuration, @componentScan, @EnableAutoConfiguration)
@EnableAutoConfiguration - it helps Spring to guess configuration based on jars available at classpath.

@Controller - mark the class as web controller and handles the http requests
@ResponseBody - helps in binding the response for an incomming http reuest.
@RestController - combination of @Controller and @ResponseBody annotations
@RequestMapping(method = RequestMethod.Type, value = "/path") - used to get the path responsible for serving the Http requests 
@PathVariable("placeHolderName") - used to bring the value from URL via '/' to the method argument
@RequestParam/ @RequestParam(value = "value", required = false) - used to bring the value from URL via '?' or queries pased in the http requests to the method argument
@GetMapping
@PostMapping
@PutMapping
@DeleteMapping


JPA & Hibrnate:-

JPA 2.0 are available in javax.persistence package
@Entity - mark the POJO class as JPA Entity Bean (non- argument constructor is required)
@Id - Mark the field as primary Key, can be used over filed or getter method(best to use with getter as values can be modified easily via corresponding setter method)
@GeneratedValue(Strategy = GenerationType.AUTO) - Used for taking the primary key generation strategy.(By default generation strategy is AUTO)
@GeneratedValue(Strategy = GenerationType.IDENTITY) - database determine and assign the next primary key
@GeneratedValue(Strategy = GenerationType.TABLE) - IT keeps a saperate table with primary key values (@TableGenerator)
@GeneratedValue(Strategy = GenerationType.SEQUENCE) - Some databases support a SEQUENCE column type. It uses @SequenceGenerator

	SEQUENCE	@Id
				@SequenceGenerator(name="seq1",sequenceName="HIB_SEQ")
				@GeneratedValue(strategy=SEQUENCE,generator="seq1")
				private Integer employeeId;
				
	Table		@Id
				@GeneratedValue(strategy=GenerationType.TABLE , generator="employee_generator")
				@TableGenerator(name="employee_generator",
							   table="pk_table",
							   pkColumnName="name",
							   valueColumnName="value",
							   allocationSize=100)
				private Integer employeeId;
				
@Embeddable - for multi-column primary key, You must create a class to represent this primary key. mark this class with @Embeddable (this class will have a field annotated with @Id annotation for primary key)
			  This one embeddable entity can be shared with multiple entities as per requirement.
			  Entity annotated with @Embeddable should have no-argument constructor else error will occurs
@Embedded	- Used while using the Embeddable entity as primary key for current entity.
@EmbeddableId - used for composite primary key via class annotated with @Embeddable annotation. 
@Table - The Table name that need to be stored in DB can be customized further with this annotation. 
The @Table annotation provides four attributes, allowing you to override the name of the table, its catalog, and its schema, and to enforce unique constraints on columns in the table.
@SecondaryTable - Can be used to draw an attribute/field in an entity from secondary table
@Column - at the time of drawing attribute from secondary table into an entity, the attribute must be marked with @Column annotation with a table attribute identifying the table.
	
	@Entity
	@Table(name = "employee")
	@SecondaryTable(name = "employee_details")
	public class EmployeeEntity implements Serializable
	{
	   @Id
	   @GeneratedValue (strategy = GenerationType.SEQUENCE)
	   private Integer employeeId;
	   private String  firstName;
	   private String  lastName;
	 
	   @Column(table = "employee_details")
	   public String address;
	}

@UniqueConstraint - 
@Basic (fetch = FetchType.LAZY, optional = false) - to make a column as not null. 
@Column(name="FNAME",length=100,nullable=false)
@Transient - Fields that are used at run time can be discarded from object as they already persist in database, use @Transient on such fields.
@Temporal(TemporalType.TIME) - used for geting the specific fragment of a timestamp in form of date, time, TimeStamp
@Lob - String and charactor based large data can be stored with this annotation
@Order - allow data to be order once it has been retrieved from database
@ordercolumn - allow ordering of appropriate collection type to be maintained in database
@NamedQuery - allow one or more HQL/ JPQL queries to be associated with an entity

	@Entity
	@NamedQuery(
			name="findAuthorsByName",
			query="from Author where name = :author"
	)

@Version - control versioning or concurrency

@OrderBy("firstName asc") - it will sort data of collection with firstName in asscending order

@OneToOne/ @ManyToMany - used when two entities are one to one dependent on each others
-	@PrimaryKeyJoinColumn - used when two entities share same primary key 
-	@JoinColumn - used when foreign key is held by one of the entity
	-	@MapedBy - used along with @JoinColumn and @OneToOne annotations to achieve Bi-directional relationship
			
		**********************  Use of @PrimaryKeyJoinColumn
			@Entity
			@Table(name = "company")
			public class Company implements Serializable {
			   
			  @Id
			  @Column(name = "id")
			  @GeneratedValue
			  private int id;
			   
			  @OneToOne(cascade = CascadeType.MERGE)
			  @PrimaryKeyJoinColumn
			  private CompanyDetail companyDetail;
			   
			  ...
			}
			 
			@Entity
			@Table(name = "companyDetail")
			public class CompanyDetail implements Serializable {
			 
			  @Id
			  @Column(name = "id")
			  private int id;
			   
			  ...
			}
		
		************************* Use of @JoinColumn
		
		@Entity
		@Table(name = "contactDetail")
		public class ContactDetail implements Serializable {
		 
		  @Id
		  @Column(name = "id")
		  @GeneratedValue
		  private int id;
		   
		  @OneToOne
		  @MapsId
		  @JoinColumn(name = "contactId")
		  private Contact contact;
		   
		  ...
		}
		 
		@Entity
		@Table(name = "contact")
		public class Contact implements Serializable {
		 
		  @Id
		  @Column(name = "ID")
		  @GeneratedValue
		  private Integer id;
		 
		  @OneToOne(mappedBy = "contact", cascade = CascadeType.ALL)
		  private ContactDetail contactDetail;
		 
		  ....
		}
@ManyToMany - We use @ManyToMany annotation to create a many-to-many relationship between two entities. 
In a bi-directional association, the @ManyToMany annotation is used on both the entities but only one entity can be the owner of the relationship.
The entity that specifies the @JoinTable is the owning side of the relationship and the entity that specifies the mappedBy attribute is the inverse side.

@ManyToOne - Used when one entity is dependent on another entity with many to one relationship. Default fetch type - EAGER
-	@JoinColumn - Use this annotation when foreign key is held by one entity (especially when dependent entity have a field marked as foreign key which is a primary key of another entity)
-	@JoinTable - use this in case entities associated via association table

	**************** Use of Join Column
		@Entity
		@Table(name = "contact")
		public class Contact implements Serializable {
		 
		  @ManyToOne
		  @JoinColumn(name = "companyId")
		  private Company company;
		   
		  ...
		   
		 }
	
	***************** Use of @JoinTable
		@OneToOne(cascade = CascadeType.ALL)
		@JoinTable(name="EMPLOYEE_ACCCOUNT", joinColumns = @JoinColumn(name="EMPLOYEE_ID"),
		inverseJoinColumns = @JoinColumn(name="ACCOUNT_ID"))
		private AccountEntity account;
		
@OneToMany - used in vice versa of ManyToOne or when an entity can be mapped to many entities.  Default fetch type - Lazy
@OneToMany(Optional = false) - makes sure that no entity tuple can exist without entity that is going to be mapped in current entity.
-	@JoinColumn - Used when dependent entity have a field marked as foreign key which is a primary key of another entity


		@Entity(name = "ForeignKeyAssoEntity")
		@Table(name = "Employee", uniqueConstraints = {
		@UniqueConstraint(columnNames = "ID"),
		@UniqueConstraint(columnNames = "EMAIL") })
		public class EmployeeEntity implements Serializable {
		 
			private static final long serialVersionUID = -1798070786993154676L;
		 
			@Id
			@GeneratedValue(strategy = GenerationType.IDENTITY)
			@Column(name = "ID", unique = true, nullable = false)
			private Integer employeeId;
		 
			@Column(name = "EMAIL", unique = true, nullable = false, length = 100)
			private String email;
		 
			@Column(name = "FIRST_NAME", unique = false, nullable = false, length = 100)
			private String firstName;
		 
			@Column(name = "LAST_NAME", unique = false, nullable = false, length = 100)
			private String lastName;
		 
			@OneToMany(cascade=CascadeType.ALL)
			@JoinColumn(name="EMPLOYEE_ID")
			private Set<AccountEntity> accounts;
		
		 - - - - - - - - - - - - - - - - - - - - - - -
		 
		@Entity(name = "ForeignKeyAssoAccountEntity")
		@Table(name = "ACCOUNT", uniqueConstraints = {
		@UniqueConstraint(columnNames = "ID")})
		public class AccountEntity implements Serializable
		{
			private static final long serialVersionUID = -6790693372846798580L;
		 
			@Id
			@GeneratedValue(strategy = GenerationType.IDENTITY)
			@Column(name = "ID", unique = true, nullable = false)
			private Integer accountId;
		 
			@Column(name = "ACC_NUMBER", unique = true, nullable = false, length = 100)
			private String accountNumber;
		 
			@ManyToOne
			private EmployeeEntity employee;
			
-	@JoinTable - use this in case entities associated via association table

		@Entity(name = "JoinTableEmployeeEntity")
		@Table(name = "Employee", uniqueConstraints = {
		@UniqueConstraint(columnNames = "ID"),
		@UniqueConstraint(columnNames = "EMAIL") })
		public class EmployeeEntity implements Serializable
		{
			private static final long serialVersionUID = -1798070786993154676L;
		 
			@Id
			@GeneratedValue(strategy = GenerationType.IDENTITY)
			@Column(name = "ID", unique = true, nullable = false)
			private Integer employeeId;
		 
			@Column(name = "EMAIL", unique = true, nullable = false, length = 100)
			private String email;
		 
			@Column(name = "FIRST_NAME", unique = false, nullable = false, length = 100)
			private String firstName;
		 
			@Column(name = "LAST_NAME", unique = false, nullable = false, length = 100)
			private String lastName;
		 
			@OneToMany(cascade=CascadeType.ALL)
			@JoinTable(name="EMPLOYEE_ACCOUNT", joinColumns={@JoinColumn(name="EMPLOYEE_ID", referencedColumnName="ID")}
			, inverseJoinColumns={@JoinColumn(name="ACCOUNT_ID", referencedColumnName="ID")})
			private Set<AccountEntity> accounts;
			
			- - - - - - - - - - - - - - - - - - - -
			
			@Entity(name = "JoinTableAccountEntity")
			@Table(name = "ACCOUNT", uniqueConstraints = {
			@UniqueConstraint(columnNames = "ID")})
			public class AccountEntity implements Serializable
			{
			 
				private static final long serialVersionUID = -6790693372846798580L;
			 
				@Id
				@GeneratedValue(strategy = GenerationType.IDENTITY)
				@Column(name = "ID", unique = true, nullable = false)
				private Integer accountId;
			 
				@Column(name = "ACC_NUMBER", unique = true, nullable = false, length = 100)
				private String accountNumber;
				
Hibernate Inheritance Mapping Annotations:- 

@Inheritance
@DiscriminatorColumn
@DiscriminatorValue


https://howtodoinjava.com/hibernate/hibernate-jpa-2-persistence-annotations-tutorial/

Hibernate DDL configuration values :-

*	hibernate.hbm2ddl.auto
	As per the documentation it can have four valid values:

	create | update | validate | create-drop

	Following is the explanation of the behaviour shown by these value:

-	create :- create the schema, the data previously present (if there) in the schema is lost
-	update:- update the schema with the given values.
-	validate:- validate the schema. It makes no change in the DB.
-	create-drop:- create the schema with destroying the data previously present(if there). It also drop the database schema when the SessionFactory is closed.
	Following are the important points worth noting:

-	In case of update, if schema is not present in the DB then the schema is created.
-	In case of validate, if schema does not exists in DB, it is not created. Instead, it will throw an error:- Table not found:<table name>
-	In case of create-drop, schema is not dropped on closing the session. It drops only on closing the SessionFactory.
-	In case if i give any value to this property(say abc, instead of above four values discussed above) or it is just left blank. It shows following behaviour:

	-If schema is not present in the DB:- It creates the schema

	-If schema is present in the DB:- update the schema.
	
In Hibernate the default relationship FetchType is LAZY. 
All to-one relationships use FetchType.EAGER and all to-many relationships FetchType.LAZY.

************************************************************************************************************************************************

JPA Cascade Types
The cascade types supported by the Java Persistence Architecture are as below:

CascadeType.PERSIST : cascade type presist means that save() or persist() operations cascade to related entities.
CascadeType.MERGE : cascade type merge means that related entities are merged when the owning entity is merged.
CascadeType.REFRESH : cascade type refresh does the same thing for the refresh() operation.
CascadeType.REMOVE : cascade type remove removes all related entities association with this setting when the owning entity is deleted.
CascadeType.DETACH : cascade type detach detaches all related entities if a “manual detach” occurs.
CascadeType.ALL : cascade type all is shorthand for all of the above cascade operations.

For Example taking the reference of Employee and ACCOUNT Entities:-
- Any change happened on EmployeeEntity must cascade to AccountEntity as well. 
- If you save an employee, then all associated accounts will also be saved into database. 

NOTE:- When and Why you need to Implement equals() and hashCode() while using JPA
		When we tried to implement a class's fields (Composite Key) as Primary Key of an Entity,
		then JVM forces us to override and provide custom implementation of equals() & hashCode()
		
- You need to implement the equals() and hashCode() methods for primary key classes if you map composite primary keys. So, if use an entity as the key, it needs to provide both methods.

-	Java’s default implementation of the equals() and hashCode() methods are based on the object’s identity.
	That means that no two objects are equal and all of them have a different hash code value.

-	Hibernate makes sure to return the same object if you read the same entity twice within a Session. 
	Due to this, the default equals() and hashCode() implementations are OK as long as an entity stays in the context of one Session. 
	So, in the following example, e1 and e2 are the same objects and the equals() method, therefore, returns true.

		MyEntity e1 = em.find(MyEntity.class, id);
		MyEntity e2 = em.find(MyEntity.class, id);
		Assert.assertTrue(e1.equals(e2));


Note:- Creating JPA Entity without primary key and composite key availability	:-

for every table in database we have unique row number and this Row_Number can be utilized for creating the entity

| row_id      | employee_id | project_name |
|:------------|:------------|:-------------|
| 1           | 1           | Stack01      |
| 2           | 1           | Jira01       |
| 3           | 1           | Github01     |
| 4           | 2           | Stack01      |
| 5           | 2           | Jira01       |
| 6           | 3           | Jira01       |
-------------------------------------------

		@Id
		@Column(name = "row_id")
		private Integer id;

- Indexing with JPA for Query tuning
********************************************************************************************************************************************************

Spring JPA Transaction Management
Transactional management and @Transactional annotation of Spring Transaction 

 <!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager"/>

	<!-- a PlatformTransactionManager is still required -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- (this dependency is defined somewhere else) -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	In case the PlateformTransactionManager class has the bean name as = "transactionManager" ,
	then we can omit the attribute "transaction-manager" from the transaction configuration annotation

	
Using @Transactional

The @Transactional annotation may be placed before an interface definition, a method on an interface, a class definition, or a public method on a class.
It is recommended to use @Transactional annotation on Concrete classes and not on interface level as Annotations are not inherited and there proxy can't be created.
Also @Transactional annotation is recommended to use with public methods only as for other access modifiers, it can't be passed and get neglected.

@Transactional Properties:-

	Property		Type							Description
	
	propagation		enum: Propagation				optional propagation setting
	isolation		enum: Isolation					optional isolation level
	readOnly		boolean							read/write vs read-only transaction
	timeout			int (in seconds granularity)	the transaction timeout
	rollbackFor		an array of Class objects, which must be derived from Throwable	an optional array of exception classes which must cause rollback
	rollbackForClassname	an array of class names. Classes must be derived from Throwable	an optional array of names of exception classes that must cause rollback
	noRollbackFor	an array of Class objects, which must be derived from Throwable	an optional array of exception classes that must not cause rollback.
	noRollbackForClassname	an array of String class names, which must be derived from Throwable	an optional array of names of exception classes that must not cause rollback
	
Transaction propagation Types:-
	-@Transactional(propagation=Propagation.REQUIRED)
	-@Transactional(propagation=Propagation.REQUIRES_NEW)
	-@Transactional(propagation=Propagation.NESTED)
	
1)	 @Transactional(propagation=Propagation.REQUIRED)
    public void doSomething() {
        // access a database using a DAO
    }
	
	When doSomething() is called it will start a new transaction if the caller has not already started a transaction.
	If the caller of this method has already started a transaction then the callers' transaction is used 
	and no new transaction is created (i.e. there is one transaction in play).
	If an exception is thrown inside doSomething() then it will be rolled back, meaning that the caller will also see the transaction rolled back.
	When doSomething() returns the transaction will not have been commited yet. It is the caller that will commit the transaction (or possibly rolled-back).

2)	class Service {
    @Transactional(propagation=Propagation.REQUIRES_NEW)
    public void doSomething() {
        // access a database using a DAO
		}
	}
	
	When doSomething() is called it will always start a new transaction.
	If the caller of this method has already started a transaction (TxnOuter) then the callers' transaction is suspended
	and a new transaction (TxnInner) is created (i.e. there are two transactions in play).
	If an exception is thrown inside doSomething() then TxnInner will be rolled back, but the "suspended" transaction from the caller (TxnOuter) is unaffected.
	When doSomething() returns without an Exception it will commit the transaction (TxnInner). 
	The caller's transaction (TxnOuter) will be resumed and be unaware that another transaction was committed.
	The caller can then commit or roll-back TxnOuter as it sees fit.
	The important point to note is that the Database views TxnOuter and TxnInner as completely independant transactions, and therefore two independant commits.
	
3) 	class Service {
    @Transactional(propagation=Propagation.NESTED)
    public void doSomething() {
        // access a database using a DAO
		}
	}
	
	NESTED can only be used if your JDBC driver and/or database supports JDBC savepoints
	When doSomething() is called it will start a new transaction if the caller has not already started a transaction.
	If the caller of this method has already started a transaction then the callers' transaction is used and 
	no new transaction is created (i.e. there is one transaction in play). However a "savepoint" is marked on the transaction when doSomething() is entered.
	If an Exception is thrown inside doSomething() then the transaction can be partially rolled back the transaction to the "savepoint". 
	The caller will continue with the transaction.
	When doSomething() returns without an Exception it is the caller who will commit the entire transaction (or roll back).
	The important point to note is that the Database views only one transaction and there is only one commit.
